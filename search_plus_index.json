{"./":{"url":"./","title":"关于本书","keywords":"","body":"undefined README.md "},"docs/gitbook_manual/":{"url":"docs/gitbook_manual/","title":"Gitbook","keywords":"","body":"gitbook_manual index.md 1.配置Node.js 2.安装GitBook GItBook GitBook 是什么？其实用一句话就可以概括，它是一个 能将使用 Markown 语法的 md 格式文档，快速制作成各种格式电子书的工具。 常被用于编写文档或者电子书，特点是方便简洁，易于使用。只要熟悉轻量级标记语法的 Markdown 语法，就能使用 GitBook 来制作各种格式的电子书。 GitBook 有网页版和本地版两种，网页版通过 https://www.gitbook.com 网址进行访问，本地版主要是基于 Node.js 环境进行开发。 [!NOTE] 目前虽然 GitBook 的代码无人维护，但是好在代码是开源的，可以根据自己需求来更改。 网页版没玩明白，下面主要讲解Windows本地部署 1.配置Node.js 由于目前Gitbook项目已经停止维护，Node版本过高存在不兼容问题，所以需要使用老版本的Node，但是卸载重新安装进行版本切换过于麻烦，所以使用Node的版本控制工具gnvm，安装8.11.1（自己测试的，按照官网上的差不多10.x一下就可以） # 安装node@8.11.1 gnvm install 8.11.1 # 切换版本 gnvm use 8.11.1 # 查看node版本 node -v 2.安装GitBook 在cmd终端输入以下命令即可 [!TIP|style:flat] 1.以管理员身份启动cmd 2.-V是大写的V # 全局安装gitbook-cli npm install gitbook-cli -g # 查看gitbook版本 gitbook -V "},"docs/gitbook_manual/install.html":{"url":"docs/gitbook_manual/install.html","title":"安装","keywords":"","body":"gitbook_manual install.md 1.配置Node.js 2.安装GitBook 安装 1.配置Node.js 由于目前Gitbook项目已经停止维护，Node版本过高存在不兼容问题，所以需要使用老版本的Node，但是卸载重新安装进行版本切换过于麻烦，所以使用Node的版本控制工具gnvm，安装8.11.1（自己测试的，按照官网上的差不多10.x一下就可以） # 安装node@8.11.1 gnvm install 8.11.1 # 切换版本 gnvm use 8.11.1 # 查看node版本 node -v 2.安装GitBook 在cmd终端输入以下命令即可 [!TIP|style:flat] 1.以管理员身份启动cmd 2.-V是大写的V # 全局安装gitbook-cli npm install gitbook-cli -g # 查看gitbook版本 gitbook -V "},"docs/nodeversion_control/gnvm_use.html":{"url":"docs/nodeversion_control/gnvm_use.html","title":"Node 版本控制","keywords":"","body":"nodeversion_control gnvm_use.md 1.GNVM介绍 2.下载 3.使用 4.常用命令 1.node版本信息 2.node下载 3.本地安装过的node列表 4.node版本切换 5.npm安装 6.node删除 7.node更新 GNVM-Node.js 多版本管理器 1.GNVM介绍 GNVM这个东西的不如 T 好看，没有 NVM 适配的环境多，但是它适配 Windows而且不用删除原有node[绝杀]，当然它也有它的优势，不依赖任何环境，无需配置，多线程下载，内置 TAOBAO。 2.下载 上方蓝字，点击进入GNVM的GitHub页面找到下面这里 按照自己的情况下载即可，下载后是一个exe格式的文件，将其放到Node的安装目录下，与node.exe同级。 3.使用 [!TIP|style:flat] 使用cmd时，要以管理员身份运行，否则权限不够 使用cmd查看使用gnvm version命令，出现版本说明则代表成功。 使用下面命令将镜像源切成淘宝源 gnvm config registry TAOBAO 4.常用命令 1.node版本信息 这里可以获取到node所需的npm版本 gnvm search node版本号 2.node下载 gnvm install node版本号 3.本地安装过的node列表 gnvm ls 4.node版本切换 gnvm use node版本号 5.npm安装 gnvm npm npm版本号 6.node删除 不用常清，不占多少内存 gnvm uninstall node版本号 7.node更新 感觉除非报错了，或者太久了，其他似乎没必要升级 gnvm update latest "},"docs/Project_manuals/":{"url":"docs/Project_manuals/","title":"项目文件","keywords":"","body":"Project_manuals index.md "},"docs/Project_manuals/xingongqingjia/":{"url":"docs/Project_manuals/xingongqingjia/","title":"信工签到","keywords":"","body":"xingongqingjia index.md "},"docs/Project_manuals/xingongqingjia/design_manual.html":{"url":"docs/Project_manuals/xingongqingjia/design_manual.html","title":"设计手册","keywords":"","body":"xingongqingjia design_manual.md 1.数据库 学生账号student 班委账号cadre 请假信息leave 课表schedule 课堂信息class 2.API接口 设计手册 1.数据库 学生账号student 参数名 类型 长度 补充 说明 username varchar 255 主键、非空 学号 name varchar 255 非空 姓名 major int 非空（软工：1） 专业代码 openid varchar 255 微信openid number int 4 非空、默认：3 次数 course_id int 当前课程编号 is_arrive int 默认：0（到场：1） 签到标记 班委账号cadre 参数名 类型 长度 补充 说明 username varchar 255 主键、非空 学号 name varchar 255 非空 姓名 password varchar 255 非空、默认：123456 密码 major int 非空（软工：1） 专业代码 请假信息leave 参数名 类型 长度 补充 说明 id int 主键、非空、自增 序号 flag varchar 255 非空（0暗请、1明请） 请假类型 date datetime 非空 请假日期 cause text 非空 请假理由 username varchar 255 非空 学生学号 file varchar 255 图片地址 tcause text 老师驳回原因 state int 非空（0等待，1同意，2驳回，3取消，4完成）、默认：0 请假状态 课表schedule 参数名 类型 长度 补充 说明 id int 主键、非空、自增 序号 major int 非空（软工：1） 专业代码 course_name varchar 255 非空 课程名 time time 非空 上课时间 number int 非空 课程节数 weekday int 非空 星期 people varchar 255 非空 上课人员（全体、前xx人、后xx人） classroom varchar 255 非空 教室号 teacher varchar 255 非空 授课老师 课堂信息class 参数名 类型 长度 补充 说明 id int 主键、非空、自增 序号 course_id int 非空 课程id username varchar 255 非空 学号 state int 非空（0迟到，1旷课，2早退） 情况 date varchar 255 非空 时间 2.API接口 注意 - 签到系统 (apifox.com) "},"docs/up_b0ok/experience/node.js_installation_tutorial.html":{"url":"docs/up_b0ok/experience/node.js_installation_tutorial.html","title":"up 的 b0ok","keywords":"","body":"experience node.js_installation_tutorial.md 1.Node.js简介 2.下载node.js--下载地址 node.js安装教程（windows） 1.Node.js简介 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型。它的包生态系统，npm，是目前世界上最大的开源库生态系统。 2.下载node.js--下载地址 1.如图点击 Other Downloads 2.选择Windows Installer (.msi) 下载msi文件安装后可以让系统替我们配置node.js的环境变量 3.下载好后打开安装包 选择Add to PATH 任何点击Next 4.安装好后我们打开cmd 输入node -v查看是否安装成功 "},"docs/yc_bOok/Code-Generators/mybatis-plus.html":{"url":"docs/yc_bOok/Code-Generators/mybatis-plus.html","title":"yc 的 bOok","keywords":"","body":"Code-Generators mybatis-plus.md 一，mybatis-plus的简介 二，一个简单的基于mybatis-plus的程序 基于mybatis-plus的代码生成器 一，mybatis-plus的简介 ​ MyBatis-Plus 是一个 Mybatis 增强版工具，在 MyBatis 上扩充了其他功能没有改变其基本功能，为了简化开发提交效率而存在。 ​ 官网文档地址：https://baomidou.com/ ​ 代码生成器(新)文档: https://baomidou.com/pages/981406/ 它的作用就是为了方便我们以后快速开发，因为在大多数的情况下，我们都是适用的三层结构，他的原理就是 好比造句： ​ _去_ 例如：我去学校，你去玩，他们中间的都一样，而代码生成器就是起一个自动替换的功能，下面让我们试试吧 二，一个简单的基于mybatis-plus的程序 ​ 首先新建一个spring boot的项目 第一步连接数据库application.yml server: port: 9090 spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/code?serverTimezone=GMT%2b8 username: root password: 你的MySQL的密码 再创建一个表 CREATE TABLE `student` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id', `name` varchar(255) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '姓名', `grades` int(11) DEFAULT NULL COMMENT '成绩', PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin; 先测试准备一个启动程序 Test.java import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping public class Test { @GetMapping public String test(){ return \"你好\"; } } 然后运行，这样算成功 然后导入mybatis-plus依赖刷新maven com.baomidou mybatis-plus-boot-starter 3.5.4 com.baomidou mybatis-plus-generator 3.5.1 org.apache.velocity velocity 1.7 log4j log4j 1.2.17 org.projectlombok lombok true MybatisPlusConfig.java 配置文件 import com.baomidou.mybatisplus.annotation.DbType; import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor; import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor; import org.mybatis.spring.annotation.MapperScan; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; //注解想注入到容器中必须加@Configuration被识别 @Configuration @MapperScan(\"com.yuan.springboot.mapper\") public class MybatisPlusConfig { /** * 添加分页插件 **/ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));//如果配置多个插件,切记分页最后添加 //interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType return interceptor; } } 找到以下的文件复制到resources/templates 再测试类中进行测试需要根据自己的需求求改 MybatisPlusCodeApplicationTests.java import com.baomidou.mybatisplus.generator.FastAutoGenerator; import com.baomidou.mybatisplus.generator.config.OutputFile; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; import java.util.Collections; @SpringBootTest class MybatisPlusCodeApplicationTests { @Test void contextLoads() { generate(); } private void generate() { FastAutoGenerator.create(\"jdbc:mysql://localhost:3306/code?serverTimezone=GMT%2b8\", \"root\", \"yuan0530\") .globalConfig(builder -> { builder.author(\"自己diy\") // 设置作者 .fileOverride() // 覆盖已生成文件 .outputDir(\"/袁鹏的训练/java-test/mybatis-plus-code/src/main/java/\"); // 指定输出目录 }) .packageConfig(builder -> { builder.parent(\"com.example\") // 设置父包名 .moduleName(\"\") // 设置父包模块名 .pathInfo(Collections.singletonMap(OutputFile.mapperXml, \"/袁鹏的训练/java-test/mybatis-plus-code/src/main/resources/mapper/\")); // 设置mapperXml生成路径 }) .strategyConfig(builder -> { builder.entityBuilder().enableLombok(); builder.mapperBuilder().enableMapperAnnotation().build(); builder.controllerBuilder().enableHyphenStyle() // 开启驼峰转连字符 .enableRestStyle(); // 开启生成@RestController 控制器 builder.addInclude(\"student\") // 设置需要生成的表名就是数据库中创建那个 .addTablePrefix(\"\"); // 设置过滤表前缀 }) // .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板 .execute(); } } 运行后生成的文件目录 还可以自己diy生成的代码 再controller.java.vm中修改 package ${package.Controller}; import com.baomidou.mybatisplus.extension.plugins.pagination.Page; import org.springframework.web.bind.annotation.*; import java.util.List; import $!{package.Service}.$!{table.serviceName}; import ${package.Entity}.${entity}; #if(${superControllerClassPackage}) import ${superControllerClassPackage}; #end /** * * $!{table.comment} 前端控制器 * * * @author ${author} * @since ${date} */ #if(${restControllerStyle}) @RestController #else @Controller #end @RequestMapping(\"#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end\") #if(${kotlin}) class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end #else #if(${superControllerClass}) public class ${table.controllerName} extends ${superControllerClass} { #else public class ${table.controllerName} { #end @Resource private ${table.serviceName} ${table.entityPath}Service; @PostMapping public Boolean save(@RequestBody ${entity} ${table.entityPath}) { return ${table.entityPath}Service.saveOrUpdate(${table.entityPath}); } @DeleteMapping(\"/{id}\") public Boolean delete(@PathVariable Integer id) { return ${table.entityPath}Service.removeById(id); } @GetMapping public List findAll() { return ${table.entityPath}Service.list(); } @GetMapping(\"/{id}\") public List findOne(@PathVariable Integer id) { return ${table.entityPath}Service.list(); } @GetMapping(\"/page\") public Page findPage(@RequestParam Integer pageNum, @RequestParam Integer pageSize) { return ${table.entityPath}Service.page(new Page<>(pageNum, pageSize)); } } #end 运行后的studentcontroller.java package com.example.controller; import com.baomidou.mybatisplus.extension.plugins.pagination.Page; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*; import java.util.List; import com.example.service.IStudentService; import com.example.entity.Student; /** * * 前端控制器 * * * @author 自己diy * @since 2023-11-13 */ @RestController @RequestMapping(\"//student\") public class StudentController { @Autowired private IStudentService studentService; @PostMapping public Boolean save(@RequestBody Student student) { return studentService.saveOrUpdate(student); } @DeleteMapping(\"/{id}\") public Boolean delete(@PathVariable Integer id) { return studentService.removeById(id); } @GetMapping public List findAll() { return studentService.list(); } @GetMapping(\"/{id}\") public List findOne(@PathVariable Integer id) { return studentService.list(); } @GetMapping(\"/page\") public Page findPage(@RequestParam Integer pageNum, @RequestParam Integer pageSize) { return studentService.page(new Page<>(pageNum, pageSize)); } } 其余的用法就交给你去探索了 "}}