{"./":{"url":"./","title":"关于本书","keywords":"","body":"undefined README.md "},"docs/git/":{"url":"docs/git/","title":"Git","keywords":"","body":"git index.md "},"docs/git/gitbook_manual/":{"url":"docs/git/gitbook_manual/","title":"Gitbook","keywords":"","body":"gitbook_manual index.md 1.配置Node.js 2.安装GitBook GItBook GitBook 是什么？其实用一句话就可以概括，它是一个 能将使用 Markown 语法的 md 格式文档，快速制作成各种格式电子书的工具。 常被用于编写文档或者电子书，特点是方便简洁，易于使用。只要熟悉轻量级标记语法的 Markdown 语法，就能使用 GitBook 来制作各种格式的电子书。 GitBook 有网页版和本地版两种，网页版通过 https://www.gitbook.com 网址进行访问，本地版主要是基于 Node.js 环境进行开发。 [!NOTE] 目前虽然 GitBook 的代码无人维护，但是好在代码是开源的，可以根据自己需求来更改。 网页版没玩明白，下面主要讲解Windows本地部署 1.配置Node.js 由于目前Gitbook项目已经停止维护，Node版本过高存在不兼容问题，所以需要使用老版本的Node，但是卸载重新安装进行版本切换过于麻烦，所以使用Node的版本控制工具gnvm，安装8.11.1（自己测试的，按照官网上的差不多10.x一下就可以） # 安装node@8.11.1 gnvm install 8.11.1 # 切换版本 gnvm use 8.11.1 # 查看node版本 node -v 2.安装GitBook 在cmd终端输入以下命令即可 [!TIP|style:flat] 1.以管理员身份启动cmd 2.-V是大写的V # 全局安装gitbook-cli npm install gitbook-cli -g # 查看gitbook版本 gitbook -V "},"docs/git/gitbook_manual/install.html":{"url":"docs/git/gitbook_manual/install.html","title":"安装","keywords":"","body":"gitbook_manual install.md 1.配置Node.js 2.安装GitBook 安装 1.配置Node.js 由于目前Gitbook项目已经停止维护，Node版本过高存在不兼容问题，所以需要使用老版本的Node，但是卸载重新安装进行版本切换过于麻烦，所以使用Node的版本控制工具gnvm，安装8.11.1（自己测试的，按照官网上的差不多10.x一下就可以） # 安装node@8.11.1 gnvm install 8.11.1 # 切换版本 gnvm use 8.11.1 # 查看node版本 node -v 2.安装GitBook 在cmd终端输入以下命令即可 [!TIP|style:flat] 1.以管理员身份启动cmd 2.-V是大写的V # 全局安装gitbook-cli npm install gitbook-cli -g # 查看gitbook版本 gitbook -V "},"docs/git/gitbook_manual/plugins.html":{"url":"docs/git/gitbook_manual/plugins.html","title":"插件","keywords":"","body":"gitbook_manual plugins.md 1.目录 2.灵活警报 插件 1.目录 页内目录 gitbook-plugin-page-treeview用于在页面生成目录 { \"plugins\": [ \"page-treeview\" ], \"pluginsConfig\": { \"page-treeview\": { \"copyright\": \"\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" } } } 但会在目录下方产生这么一段文字： TreeviewCopyright © Spark & Shine all right reserved, powered by aleen42 去掉这段文字。打开node_modules/gitbook-plugin-page-treeview/lib/index.js，找到这一行，删掉copyRight +。 return renderContent ? `${copyRight + renderContent}` : ''; 但还有一个小问题，就是目录跟正文间距太大了，解决方法：修改.treeview__container的样式，打开gitbook-plugin-page-treeview/assets/style.css文件，将.treeview__container中的margin-bottom设小。 .treeview__container { position: relative; margin-bottom: 5px; padding-bottom: 10px; } 2.灵活警报 gitbook-plugin-flexible-alerts { \"plugins\": [ \"flexible-alerts\" ], \"pluginsConfig\": { \"flexible-alerts\": { \"note\": { \"label\": \"Hinweis\" }, \"tip\": { \"label\": \"Tipp\" }, \"warning\": { \"label\": \"Warnung\" }, \"danger\": { \"label\": \"Achtung\" } } } } 样式如下 这是NOTE [!NOTE] 这是NOTE 这是NOTE FLAT [!NOTE|style:flat] 这是NOTE|style:flat 这是TIP [!TIP] 这是TIP 这是TIP FLAT [!TIP|style:flat] 这是TIP|style:flat 这是WARNING [!WARNING] 这是WARNING 这是WARNING FLAT [!WARNING|style:flat] 这是WARNING|style:flat 这是DANGER [!DANGER] 这是DANGER 这是DANGER FLAT [!DANGER|style:flat] 这是DANGER "},"docs/git/github/":{"url":"docs/git/github/","title":"Github","keywords":"","body":"github index.md Github 在进行项目开发时，都会用到版本控制工具来记录开发过程对项目的更改。有很多可以控制版本的工具，为了项目的合作与代码的版本控制。项目组使用Git进行版本控制，其常用代码托管平台就是大名鼎鼎的Github，在这里记录一些常见的代码。 "},"docs/git/github/create.html":{"url":"docs/git/github/create.html","title":"创建项目","keywords":"","body":"github create.md 创建项目 "},"docs/git/github/command.html":{"url":"docs/git/github/command.html","title":"常用命令","keywords":"","body":"github command.md 拉取代码 创建分支 切换本地分支 切换分支并关联远程分支 查看本地所有分支 查看远程所有分支 删除本地分支 删除远程分支 将代码从工作区添加暂存区 查看尚未暂存的更新 添加提交信息（commit 注释写错，执行 git commit --amend 此时会进入默认 vim 编辑器，修改注释后保存） 推送代码到远程分支 拉取远程分支代码 合并分支 查看 git 状态 查看提交历史 查看可引用的历史版本记录 把本地未 push 的分叉提交历史整理成直线 回到 rebase 执行之前的状态 回退版本 撤销代码 修改分支名 查看 git 配置 添加用户名 删除用户名 修改用户名 配置 Git 用户名和邮箱 统计代码行数 文件或文件夹重命名 git常用命令 拉取代码 git clone xxx.git 创建分支 git branch dev # or git checkout -b dev # or git switch -c dev 切换本地分支 git checkout dev # or git switch dev 切换分支并关联远程分支 git checkout -b dev origin/dev # or git checkout --track origin/dev 查看本地所有分支 git branch 查看远程所有分支 git branch -r 删除本地分支 git branch -d dev 删除远程分支 git push origin -d dev 将代码从工作区添加暂存区 git add . 查看尚未暂存的更新 git diff 添加提交信息（commit 注释写错，执行 git commit --amend 此时会进入默认 vim 编辑器，修改注释后保存） git commit -m 'xxxx' 推送代码到远程分支 git push origin dev # 强制推送（常在 git rebase 或 git reset 后使用） git push -f origin dev 拉取远程分支代码 git pull origin dev 合并分支 git merge dev 查看 git 状态 git status 查看提交历史 git log 查看可引用的历史版本记录 git reflog 把本地未 push 的分叉提交历史整理成直线 git rebase origin/dev 回到 rebase 执行之前的状态 git rebase --abort 回退版本 # 回退指定 commit_id 版本 git reset --hard commit_id # 回退上一个版本 git reset --soft HEAD^ # or git reset --soft HEAD~1 撤销代码 git revert commit_id 修改分支名 # 第一步 git branch -m oldBranchName newBranchName # 第二步 git push origin :oldBranchName # 第三步 git push --set-upstream origin newBranchName 查看 git 配置 # 查看全局配置 git config --global --list # 查看用户名 git config --global user.name 添加用户名 git config --global --add user.name newName 删除用户名 git config --global --unset user.name 修改用户名 git config --global user.name newName 配置 Git 用户名和邮箱 # 用户名 git config --global user.name \"Your Name\" # 邮箱 git config --global user.email \"email@example.com\" 统计代码行数 git ls-files | xargs wc -l 文件或文件夹重命名 Git 在 Windows 和 macOS 的默认文件系统中对文件大小写修改是不敏感的。可能你会先删除文件并提交，然后再新建文件再提交，这样做很麻烦，下面的 git mv 就简化了繁琐的操作 比如文件 filename.ts 或文件夹 jsutils，它们的相对路径分别是 src/filename.ts 和 src/jsutils # 将 filename.ts 文件重命名为 fileName.ts，分下面两步 # 第一步（注意下面的 name.ts 与 filename.ts 是不同的，如果你把 name.ts 改为 fileName.ts 是不行的，因为上面讲了仅大小写不同是不行的） git mv src/filename.ts src/name.ts # 第二步 git mv src/name.ts src/fileName.ts # 将 jsutils 文件夹重命名为 jsUtils，分下面两步 # 第一步 git mv src/jsutils src/utils # 第二步 git mv src/utils src/jsUtils "},"docs/git/github/specification.html":{"url":"docs/git/github/specification.html","title":"提交规范","keywords":"","body":"github specification.md 提交规范 feat: 增加新功能 fix:修复问题/BUG style: 代码风格相关无影响运行结果的 perf: 优化/性能提升 refactor: 重构 revert: 撤销修改 test: 测试相关 docs:文档/注释 chore:依赖更新/脚手架配置修改等 workflow:工作流改进 ci:持续集成 types:类型定义文件更改 wip:开发中 build:构建系统或外部依赖项的更改 release:发布新版本 "},"docs/study-web/":{"url":"docs/study-web/","title":"学习网站","keywords":"","body":"study-web index.md 前端网站 常用技术网站推荐 前端网站 vue3 官方中文文档 vite 官方中文文档 element-plus 官方中文文档 pinia 官方中文文档 vue-router 官方中文文档 Tailwind CSS 官方文档 vitest 官方中文文档 es6 中文文档 axios 官方中文文档 vxetable 官方中文文档 lodash 中文文档 echarts 官方中文文档 animate.css 官方文档 设计师必备网站 JavaScript 中文文档 JavaScript 风格指南一 JavaScript 风格指南二 rollup 官方中文文档 vueuse 文档 dayjs 官方中文文档 typescript 官方中文文档 pnpm 官方中文文档 tauri 中文官方文档 electron 官方中文文档 nuxt3 中文文档 vue3 动画库 @vueuse/motion 常用工具函数库 @pureadmin/utils Rust 官方文档中文教程 StackBlitz 在线开发工具 React 官方中文文档 nodejs 中文文档 ESLint 官方中文文档 Prettier 文档 Stylelint 中文文档 Babel 中文文档 esbuild 中文文档 tippy.js文档 vue-tippy文档 "},"docs/vue/":{"url":"docs/vue/","title":"VUE前端","keywords":"","body":"vue index.md "},"docs/vue/nodeversion_control/gnvm_use.html":{"url":"docs/vue/nodeversion_control/gnvm_use.html","title":"Node 版本控制","keywords":"","body":"nodeversion_control gnvm_use.md 1.GNVM介绍 2.下载 3.使用 4.常用命令 1.node版本信息 2.node下载 3.本地安装过的node列表 4.node版本切换 5.npm安装 6.node删除 7.node更新 GNVM-Node.js 多版本管理器 1.GNVM介绍 GNVM这个东西的不如 T 好看，没有 NVM 适配的环境多，但是它适配 Windows而且不用删除原有node[绝杀]，当然它也有它的优势，不依赖任何环境，无需配置，多线程下载，内置 TAOBAO。 2.下载 上方蓝字，点击进入GNVM的GitHub页面找到下面这里 按照自己的情况下载即可，下载后是一个exe格式的文件，将其放到Node的安装目录下，与node.exe同级。 3.使用 [!TIP|style:flat] 使用cmd时，要以管理员身份运行，否则权限不够 使用cmd查看使用gnvm version命令，出现版本说明则代表成功。 使用下面命令将镜像源切成淘宝源 gnvm config registry TAOBAO 4.常用命令 1.node版本信息 这里可以获取到node所需的npm版本 gnvm search node版本号 2.node下载 gnvm install node版本号 3.本地安装过的node列表 gnvm ls 4.node版本切换 gnvm use node版本号 5.npm安装 gnvm npm npm版本号 6.node删除 不用常清，不占多少内存 gnvm uninstall node版本号 7.node更新 感觉除非报错了，或者太久了，其他似乎没必要升级 gnvm update latest "},"docs/vue/development/":{"url":"docs/vue/development/","title":"开发","keywords":"","body":"development index.md 一、创建项目 二、代码风格控制(团队开发，初学跳过) 三、配置 @ 四、配置router 五、css原子化 六、封装SVG组件 插件 "},"docs/vue/development/create.html":{"url":"docs/vue/development/create.html","title":"一、创建项目","keywords":"","body":"development create.md 1.创建vite+vue3+ts项目 2.运行项目 创建项目 1.创建vite+vue3+ts项目 pnpm creat vite 2.运行项目 pnpm install pnpm dev "},"docs/vue/development/team-development.html":{"url":"docs/vue/development/team-development.html","title":"二、代码风格控制(团队开发，初学跳过)","keywords":"","body":"development team-development.md 1.ESlint 1.pnpm create @eslint/config 2.完善 .eslintrc.js 的 rules 3.忽略文件 4.添加命令 2.prettier 1.安装 2.配置prettier 4.忽略文件 5.ESlint配置 6.添加命令 3.stylelint 1.安装 2.配置stylrlint 3.忽略文件 4.添加命令 4.husky 1.安装 2.添加命令 3.配置husky 5.commitlint 1.安装 2.配置commitlint 3.添加命令 4.搭配husky 6.EditorConfig 代码风格控制(团队开发，初学跳过) 1.ESlint eslint 应主要负责校验语法校验，prettier 应主要负责代码格式化 pnpm i eslint -D 1.pnpm create @eslint/config How would you like to use ESLint? （你想如何使用 ESLint?） To check syntax, find problems, and enforce code style（检查语法、发现问题并强制执行代码风格） What type of modules does your project use?（你的项目使用哪种类型的模块?） JavaScript modules (import/export) Which framework does your project use? （你的项目使用哪种框架?） Vue.js Does your project use TypeScript?（你的项目是否使用 TypeScript？） Yes Where does your code run?（你的代码在哪里运行?） 选择 Browser 和 Node（按空格键进行选择，选完按回车键确定） How would you like to define a style for your project?（你想怎样为你的项目定义风格？） Use a popular style guide（使用一种流行的风格指南） 2.完善 .eslintrc.js 的 rules \"rules\": { // eslint（https://eslint.bootcss.com/docs/rules/） 'no-var': 'error', // 要求使用 let 或 const 而不是 var 'no-multiple-empty-lines': ['warn', { max: 1 }], // 不允许多个空行 'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off', 'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off', 'no-unexpected-multiline': 'error', // 禁止空余的多行 'no-useless-escape': 'off', // 禁止不必要的转义字符 // typeScript (https://typescript-eslint.io/rules) '@typescript-eslint/no-unused-vars': 'error', // 禁止定义未使用的变量 '@typescript-eslint/prefer-ts-expect-error': 'error', // 禁止使用 @ts-ignore '@typescript-eslint/no-explicit-any': 'off', // 禁止使用 any 类型 '@typescript-eslint/no-non-null-assertion': 'off', '@typescript-eslint/no-namespace': 'off', // 禁止使用自定义 TypeScript 模块和命名空间。 '@typescript-eslint/semi': 'off', // eslint-plugin-vue (https://eslint.vuejs.org/rules/) 'vue/multi-word-component-names': 'off', // 要求组件名称始终为 “-” 链接的单词 'vue/script-setup-uses-vars': 'error', // 防止使用的变量被标记为未使用 'vue/no-mutating-props': 'off', // 不允许组件 prop的改变 'vue/attribute-hyphenation': 'off' // 对模板中的自定义组件强制执行属性命名样式 } 3.忽略文件 在项目根目录新建 .eslintignore 文件 dist node_modules 4.添加命令 在 packjson.json 中 script 字段添加 \"lint:eslint\": \"eslint src --fix\" 2.prettier 1.安装 pnpm install -D eslint-plugin-prettier prettier eslint-config-prettier 2.配置prettier 根目录下新建 .prettierrc.js 文件 { \"printWidth\": 100, //每行最多显示的字符数 \"tabWidth\": 2,//tab的宽度 2个字符 \"useTabs\": true,//使用tab代替空格 \"semi\": false,//结尾使用分号 \"singleQuote\": true,//使用单引号代替双引号 \"trailingComma\": \"none\",//结尾是否添加逗号 \"bracketSpacing\": true,//对象括号俩边是否用空格隔开 \"bracketSameLine\": true,;//组件最后的尖括号不另起一行 \"arrowParens\": \"always\",//箭头函数参数始终添加括号 \"htmlWhitespaceSensitivity\": \"ignore\",//html存在空格是不敏感的 \"vueIndentScriptAndStyle\": false,//vue 的script和style的内容是否缩进 \"endOfLine\": \"auto\",//行结尾形式 mac和linux是\\n windows是\\r\\n \"singleAttributePerLine\": false //组件或者标签的属性是否控制一行只显示一个属性 } 4.忽略文件 根目录下新建 .prettierignore 文件 /dist/* /html/* .local /node_modules/** **/*.svg **/*.sh /public/* 5.ESlint配置 .eslintrc.js的extends尾行 'plugin:prettier/recommended', 6.添加命令 在 packjson.json 中 script 字段添加 \"format\": \"prettier --write \\\"./**/*.{html,vue,js,ts,json,md}\\\" \" 3.stylelint stylelint 是 css 的格式化工具 1.安装 pnpm add sass sass-loader stylelint stylelint-config-html stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-recommended-vue stylelint-config-standard stylelint-config-standard-scss stylelint-order stylelint-prettier stylelint-scss -D 2.配置stylrlint 在项目根目录下新建 stylelint.config.js文件 module.exports = { root: true, extends: [ 'stylelint-config-standard', // 配置stylelint拓展插件 'stylelint-config-html/vue', // 配置 vue 中 template 样式格式化 'stylelint-config-recess-order' // 配置stylelint css属性书写顺序插件 ], plugins: ['stylelint-order', 'stylelint-prettier', 'stylelint-scss'], overrides: [ { files: ['**/*.(css|html|vue)'], customSyntax: 'postcss-html' }, { files: ['*.scss', '**/*.scss'], customSyntax: 'postcss-scss', extends: ['stylelint-config-standard-scss', 'stylelint-config-recommended-vue/scss'] } ], rules: { 'selector-class-pattern': null, // 关闭强制选择器类名的格式 'no-descending-specificity': null, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器 'scss/dollar-variable-pattern': null, // 允许 SCSS 变量的命名采用任何模式，不做强制规定。 'selector-pseudo-class-no-unknown': [ // 不允许未知的选择器 true, { ignorePseudoClasses: ['deep', 'global'] } ], 'selector-pseudo-element-no-unknown': [ true, { ignorePseudoElements: ['v-deep', 'v-global', 'v-slotted'] } ], 'at-rule-no-unknown': [ true, { ignoreAtRules: [ 'tailwind', 'apply', 'variants', 'responsive', 'screen', 'function', 'if', 'each', 'include', 'mixin', 'use' ] } ], 'rule-empty-line-before': [ 'always', { ignore: ['after-comment', 'first-nested'] } ], 'unit-no-unknown': [true, { ignoreUnits: ['rpx'] }], 'order/order': [ [ 'dollar-variables', 'custom-properties', 'at-rules', 'declarations', { type: 'at-rule', name: 'supports' }, { type: 'at-rule', name: 'media' }, 'rules' ], { severity: 'warning' } ] }, ignoreFiles: ['**/*.js', '**/*.ts', '**/*.jsx', '**/*.tsx'] } 3.忽略文件 在项目根目录下新建 .stylelintignore文件 /node_modules/* /dist/* /html/* /public/* 4.添加命令 在 packjson.json 中 script 字段添加 \"lint:stylelint\": \"stylelint src/**/*.{css,scss,vue} --cache --fix\" 4.husky [!WARNING] 进行前需要先将项目放到git仓库中 1.安装 (最新版不会用，嘿嘿ヾ(^▽^*)))) pnpm install -D husky@8.0.0 2.添加命令 package.json的scripts尾行 \"prepare\": \"husky install\" 3.配置husky .husky文件下的pre-commit文件 #!/usr/bin/env sh . \"$(dirname \"$0\")/_/husky.sh\" pnpm lint:prettier 5.commitlint 1.安装 pnpm add @commitlint/config-conventional @commitlint/cli -D 2.配置commitlint 在项目根目录下新建 commitlint.config.js文件 module.exports = { extends: ['@commitlint/config-conventional'], // 校验规则 rules: { 'type-enum': [ 2, 'always', [ 'feat', //增加新功能 'fix', //修复问题/BUG 'perf', //优化/性能提升 'style', //代码风格相关无影响运行结果的 'docs', //文档/注释 'test', //测试相关 'refactor', //重构 'build', //构建系统或外部依赖项的更改 'ci', //持续集成 'chore', //杂项，不涉及源代码或测试文件的更改 'revert', //撤销修改 'wip', //开发中 'workflow', //工作流改进 'types', //类型定义文件更改 'release' //发布新版本 ] ], 'type-case': [0], 'type-empty': [0], 'scope-empty': [0], 'scope-case': [0], 'subject-full-stop': [0, 'never'], 'subject-case': [0, 'never'], 'header-max-length': [0, 'always', 72] } } 3.添加命令 在 packjson.json 中 script 字段添加 \"commitlint\": \"commitlint --config commitlint.config.js -e -V\" 4.搭配husky npx husky add .husky/commit-msg 在根目录下 husky文件夹中的 commit-msg #!/usr/bin/env sh . \"$(dirname -- \"$0\")/_/husky.sh\" pnpm commitlint 6.EditorConfig 在项目根目录下新建 .editorconfig文件 # Editor configuration, see http://editorconfig.org # 表示是最顶层的 EditorConfig 配置文件 root = true [*] # 表示所有文件适用 charset = utf-8 # 设置文件字符集为 utf-8 indent_style = space # 缩进风格（tab | space） indent_size = 2 # 缩进大小 end_of_line = lf # 控制换行类型(lf | cr | crlf) trim_trailing_whitespace = true # 去除行首的任意空白字符 insert_final_newline = true # 始终在文件末尾插入一个新行 [*.md] # 表示仅 md 文件适用以下规则 max_line_length = off trim_trailing_whitespace = false "},"docs/vue/development/@.html":{"url":"docs/vue/development/@.html","title":"三、配置 @","keywords":"","body":"development @.md 1.安装@types/node 2.vite.config.ts 3.tsconfig.json 配置 @ 1.安装@types/node pnpm install @types/node 2.vite.config.ts import { resolve } from 'path' resolve: { alias: { '@': resolve('src') } }, 3.tsconfig.json // 配置@ \"baseUrl\": \".\", \"paths\": { \"@/*\": [\"src/*\"], } "},"docs/vue/development/router.html":{"url":"docs/vue/development/router.html","title":"四、配置router","keywords":"","body":"development router.md 1.安装router 2.建立router文件 3.modules 4.index.ts 5.main.ts 6.路由出口 配置router 1.安装router pnpm install vue-router 2.建立router文件 在src文件夹下建立router/modules与router/index.ts 3.modules 在 modules 文件夹下创建模块化的 ts 文件，并填入对应的代码，模板如下： modules/example.ts export default [ { path: '/example', name: 'example', component: () => import('@/views/example/index.vue'), meta: { title: '举例' } } ]; 4.index.ts import type { App } from 'vue'; import { createRouter, createWebHashHistory, RouteRecordRaw } from 'vue-router'; // 引入 example.ts import exampleRouter from './modules/example'; export const publicRoutes: Array = [...exampleRouter]; const router = createRouter({ history: createWebHashHistory(), routes: publicRoutes }); /* 初始化路由表 */ export function resetRouter() { router.getRoutes().forEach((route) => { const { name } = route; if (name) { router.hasRoute(name) && router.removeRoute(name); } }); } /* 导出 setupRouter */ export const setupRouter = (app: App) => { app.use(router); }; /* 导出 router */ export default router 5.main.ts import { createApp } from 'vue'; import App from './App.vue'; const app = createApp(App); // 引入导出的 router import { setupRouter } from '@/router'; const setupApp = async () => { // 创建路由 setupRouter(app); app.mount('#app'); }; setupApp(); 6.路由出口 修改App.vue文件 "},"docs/vue/development/tailwind.html":{"url":"docs/vue/development/tailwind.html","title":"五、css原子化","keywords":"","body":"development tailwind.md 1.安装 2.初始化 3.创建样式 4.防止慢更新 css原子化 Tailwind官网Tailwind CSS 1.安装 pnpm install -D tailwindcss postcss autoprefixer 2.初始化 npx tailwindcss init -p 修改postcss.config.js 文件 module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } } 修改tailwind.config.js文件 /** @type {import('tailwindcss').Config} */ module.exports = { darkMode: \"class\", corePlugins: { preflight: false }, content: [\"./index.html\", \"./src/**/*.{vue,js,ts,jsx,tsx}\"], theme: { extend: { colors: { bg_color: \"var(--el-bg-color)\", primary: \"var(--el-color-primary)\", primary_light_9: \"var(--el-color-primary-light-9)\", text_color_primary: \"var(--el-text-color-primary)\", text_color_regular: \"var(--el-text-color-regular)\", text_color_disabled: \"var(--el-text-color-disabled)\" } } } }; 3.创建样式 建立.style/tailwind.css @tailwind base; @tailwind components; @tailwind utilities; 4.防止慢更新 在main.ts文件种导入tailwind.css [!NOTE] 一定要在main.ts中导入tailwind.css，防止vite每次hmr都会请求src/style/index.scss整体css文件导致热更新慢的问题 import \"./style/tailwind.css\"; "},"docs/vue/development/svg.html":{"url":"docs/vue/development/svg.html","title":"六、封装SVG组件","keywords":"","body":"development svg.md 1.安装 2.组件SVG组件 3.main.ts 4.vite.config.ts 5.注意 封装SVG组件 [!NOTE] 可以用，但是iconiFy更好用，但是有点学习成本，可以看看这个项目iconify-offline-arrange，或者访问官网Iconify 1.安装 // 1、先执行这条命令 pnpm i fast-glob -D // 2、再执行这条命令 pnpm i vite-plugin-svg-icons -D 2.组件SVG组件 建立components/svgIcon/index.vue文件 import { computed } from \"vue\"; const props = defineProps({ iconClass: { type: String, required: true, }, className: { type: String, default: \"\", }, iconColor: { type: String, default: \"CurrentColor\", }, }); const iconName = computed(() => `#icon-${props.iconClass}`); const svgClass = computed(() => { if (props.className) { return \"svg-icon \" + props.className; } else { return \"svg-icon\"; } }); .svg-icon { // svg 图标默认宽高，根据情况自行调整 width: 20px; height: 20px; fill: currentColor; overflow: hidden; } 3.main.ts // svg 相关 import 'virtual:svg-icons-register' import SvgIcon from './components/svgIcon/index.vue' app .component('svg-icon', SvgIcon) 4.vite.config.ts import { resolve } from 'path' // svg plugin import { createSvgIconsPlugin } from 'vite-plugin-svg-icons' export default defineConfig({ plugins: [ // 修改 svg 相关配置 createSvgIconsPlugin({ // 指定需要缓存的图标文件夹 iconDirs: [resolve(__dirname, './src/assets/svg')], })], }) 5.注意 [!NOTE] 若想修改 svg 的颜色，记得将 svg图片代码中的 fill属性删除删除 "},"docs/vue/development/plugins.html":{"url":"docs/vue/development/plugins.html","title":"插件","keywords":"","body":"development plugins.md 1.Path Intellisense——VsCode 路径自动提示、路径自动补全插件 2.ESlint 3.Prettier - Code formatter 4.Stylelint 5.EditorConfig for VS Code 6.Tailwind CSS IntelliSense 7.PostCSS Language Support 插件 1.Path Intellisense——VsCode 路径自动提示、路径自动补全插件 2.ESlint 3.Prettier - Code formatter 4.Stylelint 5.EditorConfig for VS Code 6.Tailwind CSS IntelliSense 7.PostCSS Language Support "},"docs/cloud/":{"url":"docs/cloud/","title":"服务器","keywords":"","body":"cloud index.md "},"docs/cloud/setting.html":{"url":"docs/cloud/setting.html","title":"配置","keywords":"","body":"cloud setting.md 云服务器配置 一、JDK环境安装 1.查看Java版本 2.上传Java安装包 3.解压 5.配置jdk 6.让环境变量生效 7、检查是否配置成功 二、MySql环境安装 1.上传MySql安装包 2.检查是否安装过MySql 3.检查是否安装过mariadb 4.安装MySql依赖包 5.解压MySql 6.重命名并移动位置 7.MySql安装目录并赋予权限 8.创建MySql组和用户 9.修改MySql配置文件 10.安装MySql 11.启动MySql服务 12.将MySql添加到系统进程中 13.设置MySql自动启动 14.修改root登录密码 15.设置允许远程登录 16.重启服务并测试 三、Redis环境安装及配置 1.安装gcc依赖 2.下载并解压安装包 3.安装编译redis 4.设置后台启动 5.设置开机启动 6.设置远程连接redis，并设置密码 四、Nginx环境安装 1.下载并解压安装包 2.安装 3.设置nginx开机启动 云服务器配置 一、JDK环境安装 1.查看Java版本 java -version 如果出现command not found提示，说明没有安装过Java，否则需要卸载 2.上传Java安装包 cd /usr // 切换至usr目录 ls // 查看当前目录中所有文件的文件名 mkdir java // 创建名称为java的文件夹 上传jdk到/usr/java 3.解压 cd java ls tar -zxcf (jdk包名称).tar.gz 4.删除安装包 rm -rf (jdk包名称).tar.gz // 删除指定包 5.配置jdk vi /etc/profile [!NOTE] 英文状态下，按下键盘 i 键或者按 shift + A，使之进入可编辑状态 在最后一行，添加如下代码 #java environment export JAVA_HOME=/usr/java/(jdk名称) export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar export PATH=$PATH:${JAVA_HOME}/bin [!NOTE] 按下键盘 esc 键，取消编辑状态 区分编辑和非编辑状态，看是否有INSERT标志 退出编辑状态后，按下:wq回车，进行保存并退出。(当输入有误时，或者文件被改乱，则按 :q! 进行退出且不保存，然后重新进行即可) 6.让环境变量生效 source /etc/profile 下方没提示任何信息，则表示配置成功，否则都表示配置未成功 7、检查是否配置成功 java -version 出现信息则为成功 二、MySql环境安装 1.上传MySql安装包 上传至opt目录下 2.检查是否安装过MySql rpm -qa|grep mysql 若后面有其他提示，则表示已经安装过Mysql，需要进行卸载。回车过后，没有任何提示信息，则直接跳过，执行下一步操作即可 yum remove mysql rpm –qa|grep mysql rpm –e mysql_libs rpm -e --nodeps mysql_libs 3.检查是否安装过mariadb rpm –qa|grep maridb 若回车执行后，下方没有任何提示信息，则可以跳过此步骤，执行下一步。若有，则进行卸载操作 rpm -e --nodeps mariadb-libs 4.安装MySql依赖包 yum install -y libaio yum install -y numactl 5.解压MySql tar -zxvf (文件名).tar.gz 6.重命名并移动位置 mv (原文件名) mysql 将 /opt/mysql文件夹移动到 /usr/local下 mv /opt/mysql /usr/local/ 换到/usr/local/mysql目录下，并在该目录下，创建mysqldb文件夹 cd /usr/local/mysql mkdir mysqldb 7.MySql安装目录并赋予权限 chmod -R 777 /usr/local/mysql 8.创建MySql组和用户 切换到usr/local/mysql目录下；并创建组 groupadd mysql 创建用户(-s /bin/false 参数指定mysql用户仅拥有所有权，而没有登录权限) useradd –r –g mysql –s /bin/false mysql 将用户添加到组中 chown –R mysql:mysql ./ 查看是否添加成功 id mysql 9.修改MySql配置文件 vi /etc/my.cnf [mysqld] # 设置3306端口 port=3306 # 设置mysql的安装目录 basedir=/usr/local/mysql # 设置mysql数据库的数据的存放目录 datadir=/usr/local/mysql/mysqldb # 允许最大连接数 max_connections=10000 # 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统 max_connect_errors=10 # 服务端使用的字符集默认为UTF8 character-set-server=utf8mb4 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB # 默认使用“mysql_native_password”插件认证 default_authentication_plugin=mysql_native_password # 是否对sql语句大小写敏感，1表示不敏感 lower_case_table_names = 1 [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8mb4 [client] # 设置mysql客户端连接服务端时默认使用的端口 port=3306 default-character-set=utf8mb4 10.安装MySql 切换到/usr/local/mysql/bin 目录下，执行安装操作 ./mysqld --initialize --console [!WARNING] 初始化安装成功后，一定要将初始化密码记住 A temporary password is generated for root@localhost: > 这句话后面的这里的乱码就是初始密码 11.启动MySql服务 给/usr/local/mysql目录赋予权限 chmod -R 777 /usr/local/mysql 赋予权限完成后，切换到/usr/local/mysql/support-files目录下，执行mysql.server start命令，有SUCCESS提示代表成功，否则都为失败 12.将MySql添加到系统进程中 cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld 13.设置MySql自动启动 chmod +x /etc/init.d/mysqld systemctl enable mysqld 14.修改root登录密码 切换到 /usr/local/mysql/bin 目录下执行 ./mysql -uroot -p 进入mysql操作 alter user 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '密码'; 15.设置允许远程登录 use mysql; update user set user.Host='%' where user.User='root'; flush privileges; 设置好后，输入quit退出mysql操作 16.重启服务并测试 systemctl restart mysql systemctl status mysql 三、Redis环境安装及配置 1.安装gcc依赖 yum install –y gcc 2.下载并解压安装包 wget http://download.redis.io/releases/(所需版本).tar.gz ls tar -zxvf (所需版本).tar.gz 3.安装编译redis 切换至解压后的目录 make make install PREFIX=/usr/local/redis 4.设置后台启动 //将redis的源码目录中复制redis.conf 到 redis的安装目录 cp /usr/local/redis-5.0.3/redis.conf /usr/local/redis/bin cd /usr/local/redis/bin vi redis.conf 将daemonize no 改为daemonize yes // 使修改生效 ./redis-server redis.conf 5.设置开机启动 vi /etc/systemd/system/redis.service [Unit] Description=redis-server After=network.target [Service] Type=forking ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf PrivateTmp=true [Install] WantedBy=multi-user.target 设置开机启动 systemctl daemon-reload systemctl start redis.service systemctl enable redis.service ln -s /usr/local/redis/bin/redis-cli /usr/bin/redis 6.设置远程连接redis，并设置密码 vi /usr/local/redis/bin/redis.conf 将bind 127.0.0.1 修改为 bind 0.0.0.0 设置密码，找到下面这一行#requirepass foobared去掉注释，并修改密码为所需密码 重启服务 systemctl restart redis.service 四、Nginx环境安装 1.下载并解压安装包 切换到usr/local目录 wget http://nginx.org/download/(nginx版本号).tar.gz tar -zxcf (nginx版本号).tar.gz 2.安装 安装nginx依赖库 yum install -y gcc-c++ yum install -y pcre pcre-devel yum install -y zlib zlib-devel yum install -y openssl openssl-devel 切换到nginx解压目录下 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module ./configure make 3.设置nginx开机启动 切换到 /lib/systemd/system 目录下 打开nginx.service文件 [Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/nginx ExecReload=/usr/local/nginx/sbin/nginx reload ExecStop=/usr/local/nginx/sbin/nginx quit PrivateTmp=true [Install] WantedBy=multi-user.target 修改完成后，保存并退出，执行以下命令 systemctl enable nginx.service 执行systemctl start nginx.service启动nginx服务 systemctl start nginx.service "},"docs/Project_manuals/":{"url":"docs/Project_manuals/","title":"项目文档","keywords":"","body":"Project_manuals index.md "},"docs/Project_manuals/xingongqingjia/":{"url":"docs/Project_manuals/xingongqingjia/","title":"正卷卷","keywords":"","body":"xingongqingjia index.md "},"docs/Project_manuals/xingongqingjia/design_manual.html":{"url":"docs/Project_manuals/xingongqingjia/design_manual.html","title":"设计手册","keywords":"","body":"xingongqingjia design_manual.md 1.数据库 学生账号student 班委账号cadre 请假信息leave 课表schedule 课堂信息class 2.API接口 设计手册 1.数据库 学生账号student 参数名 类型 长度 补充 说明 username varchar 255 主键、非空 学号 name varchar 255 非空 姓名 major int 非空（软工：1） 专业代码 openid varchar 255 微信openid number int 4 非空、默认：3 次数 course_id int 当前课程编号 is_arrive int 默认：0（到场：1） 签到标记 班委账号cadre 参数名 类型 长度 补充 说明 username varchar 255 主键、非空 学号 name varchar 255 非空 姓名 password varchar 255 非空、默认：123456 密码 major int 非空（软工：1） 专业代码 请假信息leave 参数名 类型 长度 补充 说明 id int 主键、非空、自增 序号 flag varchar 255 非空（0暗请、1明请） 请假类型 date datetime 非空 请假日期 cause text 非空 请假理由 username varchar 255 非空 学生学号 file varchar 255 图片地址 tcause text 老师驳回原因 state int 非空（0等待，1同意，2驳回，3取消，4完成）、默认：0 请假状态 课表schedule 参数名 类型 长度 补充 说明 id int 主键、非空、自增 序号 major int 非空（软工：1） 专业代码 course_name varchar 255 非空 课程名 time time 非空 上课时间 number int 非空 课程节数 weekday int 非空 星期 people varchar 255 非空 上课人员（全体、前xx人、后xx人） classroom varchar 255 非空 教室号 teacher varchar 255 非空 授课老师 课堂信息class 参数名 类型 长度 补充 说明 id int 主键、非空、自增 序号 course_id int 非空 课程id username varchar 255 非空 学号 state int 非空（0迟到，1旷课，2早退） 情况 date varchar 255 非空 时间 2.API接口 注意 - 签到系统 (apifox.com) "},"docs/up_b0ok/":{"url":"docs/up_b0ok/","title":"up 的 b0ok","keywords":"","body":"up_b0ok index.md "},"docs/up_b0ok/experience/node.js_installation_tutorial.html":{"url":"docs/up_b0ok/experience/node.js_installation_tutorial.html","title":"node.js 下载","keywords":"","body":"experience node.js_installation_tutorial.md 1.Node.js简介 2.下载node.js--下载地址 node.js安装教程（windows） 1.Node.js简介 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型。它的包生态系统，npm，是目前世界上最大的开源库生态系统。 2.下载node.js--下载地址 1.如图点击 Other Downloads 2.选择Windows Installer (.msi) 下载msi文件安装后可以让系统替我们配置node.js的环境变量 3.下载好后打开安装包 选择Add to PATH 任何点击Next 4.安装好后我们打开cmd 输入node -v查看是否安装成功 "},"docs/yc_bOok/Code-Generators/mybatis-plus.html":{"url":"docs/yc_bOok/Code-Generators/mybatis-plus.html","title":"yc 的 bOok","keywords":"","body":"Code-Generators mybatis-plus.md 一，mybatis-plus的简介 二，一个简单的基于mybatis-plus的程序 基于mybatis-plus的代码生成器 一，mybatis-plus的简介 ​ MyBatis-Plus 是一个 Mybatis 增强版工具，在 MyBatis 上扩充了其他功能没有改变其基本功能，为了简化开发提交效率而存在。 ​ 官网文档地址：https://baomidou.com/ ​ 代码生成器(新)文档: https://baomidou.com/pages/981406/ 它的作用就是为了方便我们以后快速开发，因为在大多数的情况下，我们都是适用的三层结构，他的原理就是 好比造句： ​ _去_ 例如：我去学校，你去玩，他们中间的都一样，而代码生成器就是起一个自动替换的功能，下面让我们试试吧 二，一个简单的基于mybatis-plus的程序 ​ 首先新建一个spring boot的项目 第一步连接数据库application.yml server: port: 9090 spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/code?serverTimezone=GMT%2b8 username: root password: 你的MySQL的密码 再创建一个表 CREATE TABLE `student` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id', `name` varchar(255) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '姓名', `grades` int(11) DEFAULT NULL COMMENT '成绩', PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin; 先测试准备一个启动程序 Test.java import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping public class Test { @GetMapping public String test(){ return \"你好\"; } } 然后运行，这样算成功 然后导入mybatis-plus依赖刷新maven com.baomidou mybatis-plus-boot-starter 3.5.4 com.baomidou mybatis-plus-generator 3.5.1 org.apache.velocity velocity 1.7 log4j log4j 1.2.17 org.projectlombok lombok true MybatisPlusConfig.java 配置文件 import com.baomidou.mybatisplus.annotation.DbType; import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor; import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor; import org.mybatis.spring.annotation.MapperScan; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; //注解想注入到容器中必须加@Configuration被识别 @Configuration @MapperScan(\"com.yuan.springboot.mapper\") public class MybatisPlusConfig { /** * 添加分页插件 **/ @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));//如果配置多个插件,切记分页最后添加 //interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType return interceptor; } } 找到以下的文件复制到resources/templates 再测试类中进行测试需要根据自己的需求求改 MybatisPlusCodeApplicationTests.java import com.baomidou.mybatisplus.generator.FastAutoGenerator; import com.baomidou.mybatisplus.generator.config.OutputFile; import org.junit.jupiter.api.Test; import org.springframework.boot.test.context.SpringBootTest; import java.util.Collections; @SpringBootTest class MybatisPlusCodeApplicationTests { @Test void contextLoads() { generate(); } private void generate() { FastAutoGenerator.create(\"jdbc:mysql://localhost:3306/code?serverTimezone=GMT%2b8\", \"root\", \"yuan0530\") .globalConfig(builder -> { builder.author(\"自己diy\") // 设置作者 .fileOverride() // 覆盖已生成文件 .outputDir(\"/袁鹏的训练/java-test/mybatis-plus-code/src/main/java/\"); // 指定输出目录 }) .packageConfig(builder -> { builder.parent(\"com.example\") // 设置父包名 .moduleName(\"\") // 设置父包模块名 .pathInfo(Collections.singletonMap(OutputFile.mapperXml, \"/袁鹏的训练/java-test/mybatis-plus-code/src/main/resources/mapper/\")); // 设置mapperXml生成路径 }) .strategyConfig(builder -> { builder.entityBuilder().enableLombok(); builder.mapperBuilder().enableMapperAnnotation().build(); builder.controllerBuilder().enableHyphenStyle() // 开启驼峰转连字符 .enableRestStyle(); // 开启生成@RestController 控制器 builder.addInclude(\"student\") // 设置需要生成的表名就是数据库中创建那个 .addTablePrefix(\"\"); // 设置过滤表前缀 }) // .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板 .execute(); } } 运行后生成的文件目录 还可以自己diy生成的代码 再controller.java.vm中修改 package ${package.Controller}; import com.baomidou.mybatisplus.extension.plugins.pagination.Page; import org.springframework.web.bind.annotation.*; import java.util.List; import $!{package.Service}.$!{table.serviceName}; import ${package.Entity}.${entity}; #if(${superControllerClassPackage}) import ${superControllerClassPackage}; #end /** * * $!{table.comment} 前端控制器 * * * @author ${author} * @since ${date} */ #if(${restControllerStyle}) @RestController #else @Controller #end @RequestMapping(\"#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end\") #if(${kotlin}) class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end #else #if(${superControllerClass}) public class ${table.controllerName} extends ${superControllerClass} { #else public class ${table.controllerName} { #end @Resource private ${table.serviceName} ${table.entityPath}Service; @PostMapping public Boolean save(@RequestBody ${entity} ${table.entityPath}) { return ${table.entityPath}Service.saveOrUpdate(${table.entityPath}); } @DeleteMapping(\"/{id}\") public Boolean delete(@PathVariable Integer id) { return ${table.entityPath}Service.removeById(id); } @GetMapping public List findAll() { return ${table.entityPath}Service.list(); } @GetMapping(\"/{id}\") public List findOne(@PathVariable Integer id) { return ${table.entityPath}Service.list(); } @GetMapping(\"/page\") public Page findPage(@RequestParam Integer pageNum, @RequestParam Integer pageSize) { return ${table.entityPath}Service.page(new Page<>(pageNum, pageSize)); } } #end 运行后的studentcontroller.java package com.example.controller; import com.baomidou.mybatisplus.extension.plugins.pagination.Page; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*; import java.util.List; import com.example.service.IStudentService; import com.example.entity.Student; /** * * 前端控制器 * * * @author 自己diy * @since 2023-11-13 */ @RestController @RequestMapping(\"//student\") public class StudentController { @Autowired private IStudentService studentService; @PostMapping public Boolean save(@RequestBody Student student) { return studentService.saveOrUpdate(student); } @DeleteMapping(\"/{id}\") public Boolean delete(@PathVariable Integer id) { return studentService.removeById(id); } @GetMapping public List findAll() { return studentService.list(); } @GetMapping(\"/{id}\") public List findOne(@PathVariable Integer id) { return studentService.list(); } @GetMapping(\"/page\") public Page findPage(@RequestParam Integer pageNum, @RequestParam Integer pageSize) { return studentService.page(new Page<>(pageNum, pageSize)); } } 其余的用法就交给你去探索了 "}}